AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Pipeline Control Plane
Mappings:
  RegionMap:
    eu-west-1:
      AMI: "ami-02d95b6fee2869fc7"
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    AllowedPattern: '.+'
  InstanceType:
    Description: Control Plane EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  SecretAccessKey:
    Description: ''
    Type: String
    NoEcho: 'true'
    ConstraintDescription: >-
      AWS Secret access keys are—as the name implies—secrets, like your
      password.
  AccessKeyID:
    Description: ''
    Type: String
    NoEcho: 'true'
    Default: ''
    ConstraintDescription: You must use your valid AWS Access key id.
  InstanceName:
    Description: ''
    Type: String
    Default: 'pipeline-control-plane'
    ConstraintDescription: Control plane EC2 instance name
  GithubOrgs:
    Description: Comma-separated list of authorized Github organizations.
    Type: String
    Default: ''
    ConstraintDescription: ''
  GithubClient:
    Description: Github oauth2 client id.
    Type: String
    Default: ''
    ConstraintDescription: ''
  GithubSecret:
    Description: Github oauth2 client secret.
    NoEcho: 'true'
    Type: String
    Default: ''
    ConstraintDescription: ''
  GithubToken:
    Description: Github personal token
    NoEcho: 'true'
    Type: String
    Default: ''
    ConstraintDescription: ''
  VaultBucketName:
    Description: 'Name of the bucket where Vault stores data. The bucket should be in the current region.'
    Type: String
    Default: ''
    ConstraintDescription: ''
  VaultKMSKeyID:
    Description: 'ID of the KMS key which Vault uses to encrypt unseal keys. The key should be in the current region.'
    Type: String
    Default: ''
    ConstraintDescription: ''

Conditions:
  HasBucketName: !Not [!Equals [!Ref VaultBucketName, '']]
  HasVaultKMSKeyID: !Not [!Equals [!Ref VaultKMSKeyID, '']]
  HasVaultExternalInfo: !And [!Condition HasBucketName, !Condition HasVaultKMSKeyID]

Resources:
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: !Ref InstanceName
        - Key: !Join [ "", [ "kubernetes.io/cluster/", !Ref "AWS::StackName"] ]
          Value: "owned"
      UserData:
        Fn::Base64:
          Fn::Sub:
          - |
            #!/usr/bin/env bash
            set -x
            export PUBLICIP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
            export PRIVATEIP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
            export FQDN=$(hostname -f)
            export K8S_VERSION=v1.12.4

            SIGNAL_URL="${SignalUrl}"

            ACCESS_KEY_ID=${AccessKeyID}
            SECRET_ACCESS_KEY=${SecretAccessKey}
            GITHUB_CLIENT=${GithubClient}
            GITHUB_SECRET=${GithubSecret}
            GITHUB_ORGS=${GithubOrgs}
            GITHUB_TOKEN=${GithubToken}


            cat > /tmp/init.conf.tpl <<EOF
            ---
            apiVersion: kubeadm.k8s.io/v1alpha3
            kind: InitConfiguration
            apiEndpoint:
              advertiseAddress: "{{ .PRIVATEIP }}"
              bindPort: 6443
            nodeRegistration:
              name: "{{ .FQDN }}"
              kubeletExtraArgs:
                cloud-provider: aws
                hostname-override: ""
                resolv-conf: /run/systemd/resolve/resolv.conf
              taints: []

            ---
            apiVersion: kubeadm.k8s.io/v1alpha3
            clusterName: pipeline-controlplane
            kind: ClusterConfiguration
            kubernetesVersion: {{.K8S_VERSION}}
            networking:
              podSubnet: "10.200.0.0/16"
            apiServerExtraArgs:
              cloud-provider: aws
              cloud-config: /etc/kubernetes/aws.conf
            apiServerExtraVolumes:
              - name: cloud-config
                hostPath: /etc/kubernetes/aws.conf
                mountPath: /etc/kubernetes/aws.conf
            controllerManagerExtraVolumes:
              - name: cloud-config
                hostPath: /etc/kubernetes/aws.conf
                mountPath: /etc/kubernetes/aws.conf
            controllerManagerExtraArgs:
              cloud-provider: aws
              cloud-config: /etc/kubernetes/aws.conf
            EOF

            printf "[GLOBAL]\nZone="$(curl -q -s http://169.254.169.254/latest/meta-data/placement/availability-zone) > /etc/kubernetes/aws.conf

            apt install -y golang-go

            GOPATH=/tmp/go go get github.com/subfuzion/envtpl && mv /tmp/go/bin/envtpl /usr/local/bin/envtpl

            envtpl < /tmp/init.conf.tpl > /tmp/init.conf

            kubeadm init --ignore-preflight-errors=SystemVerification --config=/tmp/init.conf

            mkdir -p $HOME/.kube
            cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
            chown $(id -u):$(id -g) $HOME/.kube/config

            mkdir -p /home/ubuntu/.kube
            cp -f /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
            chown ubuntu:ubuntu /home/ubuntu/.kube/config

            export KUBECONFIG=/root/.kube/config

            # Install weave network
            kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

            # Remove all taints
            kubectl taint nodes --all node-role.kubernetes.io/master-

            # Remove master label
            kubectl label node $(hostname -f) node-role.kubernetes.io/master-

            kubectl create serviceaccount --namespace kube-system tiller
            kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
            helm init --service-account tiller --wait

            helm install stable/traefik --version 1.52.6

            curl -X PUT -H 'Content-Type: ' --data-binary '{"Status" : "SUCCESS","Reason" : "Configuration Complete", "UniqueId" : "Banzai123"}' $SIGNAL_URL

          - {
              SignalUrl: !Ref WaitConditionHandle,
              SecretAccessKey: !Ref SecretAccessKey,
              AccessKeyID: !Ref AccessKeyID,
              SecretAccessKey: !Ref SecretAccessKey,
              GithubClient: !Ref GithubClient,
              GithubSecret: !Ref GithubSecret,
              GithubOrgs: !Ref GithubOrgs,
              GithubToken: !Ref GithubToken
            }

      SecurityGroups:
        - !Ref InstanceSecurityGroup
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '10'

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable SSH & HTTP access via port 22, 80'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation

  WaitConditionHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn : EC2Instance
    Properties:
      Handle:
        Ref: "WaitConditionHandle"
      Timeout: 600

  VaultRole:
    Condition: HasVaultExternalInfo
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "", [ !Ref "AWS::StackName" , "-vault" ] ]
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Join [ "", [ !Ref "AWS::StackName" , "-vault" ] ]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: ['s3:GetObject', 's3:PutObject']
                Effect: Allow
                Resource:
                  - !Join ['', ['arn:aws:s3:::', !Ref 'VaultBucketName', /*]]
              - Action: ['s3:ListBucket']
                Effect: Allow
                Resource:
                  - !Join ['', ['arn:aws:s3:::', !Ref 'VaultBucketName', /]]
              - Action:  ['kms:Encrypt', 'kms:Decrypt']
                Effect: Allow
                Resource:
                  - !Join ['', ['arn:aws:kms::', !Ref 'AWS::Region', !Ref 'AWS::AccountId', !Ref VaultKMSKeyID ]]
  InstanceProfile:
    Condition: HasVaultExternalInfo
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref VaultRole
      InstanceProfileName: vault

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt
      - EC2Instance
      - AvailabilityZone
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt
      - EC2Instance
      - PublicDnsName
  UI:
    Description: Grafana Dashboard URL.
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - EC2Instance
          - PublicIp
        - /
  SSH:
    Description: SSH Target
    Value: !Join
      - ''
      - - ssh ubuntu@
        - !GetAtt
          - EC2Instance
          - PublicIp
        - ''
  XXX:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt
      - WaitCondition
      - Data
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Control Plane Instance Config
        Parameters:
          - InstanceName
          - InstanceType
          - KeyName

      - Label:
          default: AWS Credentials for Cloudinfo
        Parameters:
          - AccessKeyID
          - SecretAccessKey

      - Label:
          default: Github oauth credentials
        Parameters:
          - GithubClient
          - GithubSecret

      - Label:
          default: Github credentials
        Parameters:
          - GithubToken
          - GithubOrgs

    ParameterLabels:
      GithubOrgs:
        default: GitHub Orgs
      GithubClient:
        default: Github Client
      GithubSecret:
        default: Github Secret

      SecretAccessKey:
        default: Secret Access Key
      AccessKeyID:
        default: Access Key ID