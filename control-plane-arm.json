{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "storageNamePrefix": {
            "type": "string",
            "minLength": "3",
            "maxLength": "10",
            "defaultValue": "storage",
            "metadata": {
              "description": "The prefix of the storage account name. Use only lowercase letters and numbers."
            }
        },
        "storageAccountSKU": {
            "defaultValue": "Premium_LRS",
            "allowedValues": [
                "Premium_LRS",
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS"
            ],
            "type": "string",
            "metadata": {
                "description": "The type of the Storage account SKU that will use the Pipeline Control Plane."
            }
        },
        "sshUserName": {
            "defaultValue": "ubuntu",
            "type": "string",
            "metadata": {
                "description": "The username SSH to the Virtual Machine hosting Pipeline Control Plane."
            }
        },
        "sshPublicKey": {
            "type": "string",
            "metadata": {
                "description": "The SSH public key in text format which will be assigned to the SSH User."
            }
        },
        "vmSize": {
            "defaultValue": "Standard_B2ms",
            "allowedValues": [
                "Standard_B2s",
                "Standard_B2ms",
                "Standard_B4ms",
                "Standard_D2s_v3",
                "Standard_D4s_v3"
            ],
            "type": "string",
            "metadata": {
                "description": "The size of the Virtual Machine that will host the Pipeline Control Plane. For example: Standard_XX where XX can A1, A2, A3 etc"
            }
        },
        "vmNamePrefix": {
            "defaultValue": "pipeline-cp",
            "type": "string",
            "minLength":"1",
            "maxLength": "49",
            "metadata": {
                "description": "The prefix of the virtual machine that will host the Pipeline Control Plane."
            }
        },
        "smtpServerAddress": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Optional. The address of your SMTP server. Fill this property to receive cluster related alerts through email."
            }
        },
        "smtpUser": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Optional. The username of your SMTP account. Fill this property to receive cluster related alerts through email."
            }
        },
        "smtpPassword": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "Optional. The password of your SMTP account. Fill this property to receive cluster related alerts through email."
            }
        },
        "smtpFrom": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Optional. The email address that will be used as a 'from' address. Fill this property to receive cluster related alerts through email."
            }
        },
        "smtpTo": {
            "defaultValue": "to@example.com",
            "type": "string",
            "metadata": {
                "description": "Optional. Fill this property to receive cluster related alerts through email."
            }
        },
        "slackWebhookUrl": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Optional. The slack web hook URL. Fill this property to receive cluster related alerts through Slack."
            }
        },
        "slackChannel": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. A Slack channel by name with \"channel\": \"#other-channel\", or send a Slackbot message to a specific user with \"channel\": \"@username\". Fill this property to receive cluster related alerts through Slack. "
            }
        },
        "pipelineImageTag": {
            "defaultValue": "0.3.0",
            "type": "string",
            "metadata": {
                "description": "Please specify the version of Pipline image to be used."
            }
        },
        "promIngUser": {
            "defaultValue": "admin",
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "Please specify the username of the Prometheus user to be created."
            }
        },
        "promIngPass": {
            "type": "securestring",
            "minLength": 8,
            "metadata": {
                "description": "Please specify the password of the Prometheus user to be created."
            }
        },
        "grafanaUser": {
            "type": "string",
            "defaultValue": "admin",
            "minLength": 1,
            "metadata": {
                "description": "Please specify the username of the Grafana user to be created."
            }
        },
        "grafanaPass": {
            "type": "securestring",
            "minLength": 8,
            "metadata": {
                "description": "Please specify the password of the Grafana user to be created."
            }
        },
        "githubOrgs": {
            "type": "string",
            "metadata": {
                "description": "Please specify the comma separated list of GitHub organizations to grant access to for the Pipeline CI."
            }
        },
        "githubClient": {
            "type": "string",
            "metadata": {
                "description": "The Cliend ID of the OAuth App in GitHub."
            }
        },
        "githubSecret": {
            "type": "securestring",
            "metadata": {
                "description": "The Cliend Secret of the OAuth App in GitHub."
            }
        },
        "azureClientId": {
            "type": "string",
            "metadata": {
                "description": "The ID of registered application in AD."
            }
        },
        "azureClientSecret": {
            "type": "securestring",
            "metadata": {
                "description": "The password of the registered application in AD."
            }
        },
        "azureSubscriptionId": {
            "type": "string",
            "metadata": {
                "description": "The id of your subscription that you want to use."
            }
        },
        "azureTenantId": {
            "type": "string",
            "metadata": {
                "description": "The tenant id of your azure account."
            }
        },
        "pipelineHelmRetryattempt": {
            "type": "string",
            "defaultValue": "30",
            "metadata": {
                "description": "The number of attemps that Pipeline tries to install Helm. Also the number times Pipeline pings Helm/Tiller wether it's up and running."
            }
        },
        "pipelineHelmRetrysleepseconds": {
            "type": "string",
            "defaultValue": "15",
            "metadata": {
                "description": "The time in seconds that Pipeline waits between attempts."
            }
        },
        "trustedUserCaUrl": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Optional. The URL to download the SSH TrustedUserCAKeys from."
            }
        },
        "vaultRoleId": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Optional. RoleID of the AppRole to authenticate against when calling Vault."
            }
        },
        "vaultSecretId": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Optional. SecretID belonging to RoleID in the AppRile to authenticate against when calling Vault."
            }
        }
    },
    "variables": {
        "imagePublisher": "Canonical",
        "imageOffer": "UbuntuServer",
        "imageSku": "16.04-LTS",
        "imageVersion": "latest",
        "suffix": "[tolower(uniqueString(resourceGroup().id, deployment().name, subscription().subscriptionId))]",
        "storageAccount": "[concat(parameters('storageNamePrefix'),variables('suffix'))]",
        "networkInterface": "[concat(parameters('vmNamePrefix'),'-nInterface-',variables('suffix'))]",
        "publicIPAddresses": "[concat(parameters('vmNamePrefix'),'-publicIP-',variables('suffix'))]",
        "virtualNetwork": "[concat(parameters('vmNamePrefix'),'-vNet-',variables('suffix'))]",
        "virtualNetworkSubnet": "[concat(parameters('vmNamePrefix'),'-vNetSunet-',variables('suffix'))]",
        "networkSecurityGroup": "[concat(parameters('vmNamePrefix'),'-networkSG-',variables('suffix'))]",
        "userDataScript": "[concat('#!/bin/bash\n','echo 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 | base64 -d | gunzip | ','SMTP_SERVER_ADDRESS=',parameters('smtpServerAddress'),' ','SMTP_USER=',parameters('smtpUser'),' ','SMTP_PASSWORD=',base64(parameters('smtpPassword')),' ','SMTP_FROM=',parameters('smtpFrom'),' ','SMTP_TO=',parameters('smtpTo'),' ','SLACK_WEBHOOK_URL=',parameters('slackWebhookUrl'),' ','SLACK_CHANNEL=',parameters('slackChannel'),' ','PIPELINE_IMAGE_TAG=',parameters('pipelineImageTag'),' ','PROM_ING_USER=',parameters('promIngUser'),' ','PROM_ING_PASS=',parameters('promIngPass'),' ','GRAFANA_USER=',parameters('grafanaUser'),' ','GRAFANA_PASS=',parameters('grafanaPass'),' ','GITHUB_ORGS=',parameters('githubOrgs'),' ','GITHUB_CLIENT=',parameters('githubClient'),' ','GITHUB_SECRET=',parameters('githubSecret'),' ','AZURE_CLIENT_ID=',base64(parameters('azureClientId')),' ','AZURE_CLIENT_SECRET=',base64(parameters('azureClientSecret')),' ','AZURE_SUBSCRIPTION_ID=',base64(parameters('azureSubscriptionId')),' ','AZURE_TENANT_ID=',base64(parameters('azureTenantId')),' ','PIPELINE_HELM_RETRYATTEMPT=',parameters('pipelineHelmRetryattempt'),' ','PIPELINE_HELM_RETRYSLEEPSECONDS=',parameters('pipelineHelmRetrysleepseconds'),' ','TRUSTED_USER_CA_URL=',parameters('trustedUserCaUrl'),' ','VAULT_ROLE_ID=',parameters('vaultRoleId'),' ','VAULT_SECRET_ID=',parameters('vaultSecretId'),' ','bash')]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccount')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "Control Plane Storage Account"
            },
            "properties": {
                "accountType": "[parameters('storageAccountSKU')]"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddresses')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "Control Plane Public IP Address"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[tolower(concat(parameters('vmNamePrefix'),'-',variables('suffix')))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetwork')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "Control Plane VirtualNetwork"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.0.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('virtualNetworkSubnet')]",
                        "properties": {
                            "addressPrefix": "10.0.0.0/24"
                        },
                        "tags": {
                            "displayName": "Control Plane VirtualNetwork Subnet"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('networkSecurityGroup')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "Control Plane Network Security Group"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "ssh",
                        "properties": {
                            "description": "Allow SSH",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 200,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "http",
                        "properties": {
                            "description": "Allow HTTP",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 210,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('networkInterface')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "Control Plane Network Interface"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddresses'))]"
                            },
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetwork')), '/subnets/', variables('virtualNetworkSubnet'))]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/',variables('publicIPAddresses'))]",
                "[concat('Microsoft.Network/virtualNetworks/',variables('virtualNetwork'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(parameters('vmNamePrefix'),'-', variables('suffix'))]",
            "apiVersion": "2017-03-30",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "Control Plane VM"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[concat(parameters('vmNamePrefix'), variables('suffix'))]",
                    "adminUsername": "[parameters('sshUserName')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/',parameters('sshUserName'),'/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('sshPublicKey')]"
                                }
                            ]
                        }
                    },
                    "customData": "[base64(variables('userDataScript'))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('imageSku')]",
                        "version": "[variables('imageVersion')]"
                    },
                    "osDisk": {
                        "name": "[tolower(concat(parameters('vmNamePrefix'),'-disk-', variables('suffix')))]",
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterface'))]"
                        }
                    ]
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccount'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('networkInterface'))]"
            ]
        }
    ],
    "outputs": {
      "publicDns": {
          "value": "[reference(variables('publicIPAddresses')).dnsSettings.fqdn]",
          "type": "string"
      },
      "pipeline": {
          "value": "[concat('http://', reference(variables('publicIPAddresses')).dnsSettings.fqdn, '/pipeline')]",
          "type": "string"
      },
      "grafana": {
        "value": "[concat('http://', reference(variables('publicIPAddresses')).dnsSettings.fqdn, '/grafana')]",
        "type": "string"
      },
      "prometheusServer": {
        "value": "[concat('http://', reference(variables('publicIPAddresses')).dnsSettings.fqdn, '/prometheus')]",
        "type": "string"
      },
      "prometheusAlertManager": {
        "value": "[concat('http://', reference(variables('publicIPAddresses')).dnsSettings.fqdn, '/alertmanager')]",
        "type": "string"
      },
      "ssh": {
        "value": "[concat('ssh ubuntu@', reference(variables('publicIPAddresses')).dnsSettings.fqdn)]",
        "type": "string"
      }
    }
}
